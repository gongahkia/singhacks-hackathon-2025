/**
 * Setup Script: Create Two Hedera Accounts for Agent Testing
 * 
 * This script uses Hedera MCP tools to create two separate accounts,
 * then generates .env files for each agent that can be used to register
 * them on the blockchain.
 * 
 * Usage:
 *   node tests/integration/setup-agents.js
 * 
 * Prerequisites:
 *   - Hedera MCP server connected and available
 *   - Operator account has sufficient HBAR to create accounts
 */

const fs = require('fs');
const path = require('path');

// This script demonstrates how to use Hedera MCP tools
// In a real environment, these would be called via MCP server
async function setupAgents() {
  console.log('üöÄ Setting up two Hedera accounts for agent testing\n');
  
  console.log('üìã Instructions:');
  console.log('1. This script will guide you through creating two Hedera accounts');
  console.log('2. You can use Hedera MCP tools OR the Hedera Portal');
  console.log('3. After creating accounts, we will generate .env files for each\n');
  
  // Instructions for manual setup or MCP usage
  const instructions = {
    option1: {
      title: 'Option 1: Using Hedera MCP Tools',
      steps: [
        'Use MCP tool: mcp_hedera-mcp-server_create_account_tool',
        'Create Account 1 (Alice):',
        '  - initialBalance: 100 HBAR',
        '  - accountMemo: "Alice Agent Test Account"',
        'Create Account 2 (Bob):',
        '  - initialBalance: 100 HBAR',
        '  - accountMemo: "Bob Agent Test Account"',
        'Note down the account IDs and public keys'
      ]
    },
    option2: {
      title: 'Option 2: Using Hedera Portal',
      steps: [
        'Visit: https://portal.hedera.com/',
        'Create two separate testnet accounts',
        'Download private keys for each account',
        'Get testnet HBAR from the faucet for each'
      ]
    }
  };
  
  console.log(`${instructions.option1.title}:`);
  instructions.option1.steps.forEach(step => console.log(`  ${step}`));
  console.log(`\n${instructions.option2.title}:`);
  instructions.option2.steps.forEach(step => console.log(`  ${step}`));
  
  // Generate template .env files
  generateEnvFiles();
  
  console.log('\n‚úÖ Generated .env.alice and .env.bob template files');
  console.log('üìù Next steps:');
  console.log('  1. Fill in the account details in each .env file');
  console.log('  2. Run: node tests/integration/a2a-payment-demo-multi.js');
}

function generateEnvFiles() {
  const rootDir = path.resolve(__dirname, '../..');
  
  // Alice's .env template
  const aliceEnv = `# Alice Agent Configuration
# Generated by setup-agents.js

# Hedera Configuration
HEDERA_NETWORK=testnet
HEDERA_ACCOUNT_ID=0.0.ALICE_ACCOUNT_ID
HEDERA_PRIVATE_KEY=302e020100300506032b657004220420ALICE_ED25519_KEY
EVM_PRIVATE_KEY=0xALICE_ECDSA_KEY

# Network Configuration
RPC_URL=https://testnet.hashio.io/api
CHAIN_ID=296
MIRROR_NODE_URL=https://testnet.mirrornode.hedera.com/api/v1

# Backend Configuration (shared)
PORT=3001
NODE_ENV=development

# Agent Identity
AGENT_NAME=Alice
AGENT_ADDRESS=0xALICE_EVM_ADDRESS
`;
  
  // Bob's .env template
  const bobEnv = `# Bob Agent Configuration
# Generated by setup-agents.js

# Hedera Configuration
HEDERA_NETWORK=testnet
HEDERA_ACCOUNT_ID=0.0.BOB_ACCOUNT_ID
HEDERA_PRIVATE_KEY=302e020100300506032b657004220420BOB_ED25519_KEY
EVM_PRIVATE_KEY=0xBOB_ECDSA_KEY

# Network Configuration
RPC_URL=https://testnet.hashio.io/api
CHAIN_ID=296
MIRROR_NODE_URL=https://testnet.mirrornode.hedera.com/api/v1

# Backend Configuration (shared)
PORT=3001
NODE_ENV=development

# Agent Identity
AGENT_NAME=Bob
AGENT_ADDRESS=0xBOB_EVM_ADDRESS
`;
  
  // Write files
  fs.writeFileSync(path.join(rootDir, '.env.alice'), aliceEnv);
  fs.writeFileSync(path.join(rootDir, '.env.bob'), bobEnv);
  
  console.log('\nüìÑ Generated files:');
  console.log(`   - ${path.join(rootDir, '.env.alice')}`);
  console.log(`   - ${path.join(rootDir, '.env.bob')}`);
}

// Export for use in other scripts
module.exports = { setupAgents, generateEnvFiles };

// Run if executed directly
if (require.main === module) {
  setupAgents().catch(console.error);
}

